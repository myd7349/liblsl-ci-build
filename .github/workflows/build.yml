name: liblsl

on:
  push:
  pull_request:
    types: [ opened, ready_for_review, reopened, synchronize ]

env:
  LIBLSL_VERSION: v1.16.2
  BUILD_TYPE: Release
  INSTALL_PREFIX: install

jobs:
  build-android:
    name: build-${{ matrix.config.rid }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - rid: android-arm
            abi: armeabi-v7a

          - rid: android-arm64
            abi: arm64-v8a

          - rid: android-x64
            abi: x86_64

          - rid: android-x86
            abi: x86

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone liblsl
        run: |
          git clone https://github.com/sccn/liblsl.git
          pushd liblsl
          git checkout ${{ env.LIBLSL_VERSION }}
          popd

      - name: Run uname
        run: uname -m

      - name: Configure
        run: >
          cmake
          -S liblsl
          -B build
          -DCMAKE_SYSTEM_NAME=Android
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake
          -DANDROID_ABI=${{ matrix.config.abi }}
          -DANDROID_PLATFORM=android-21
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}
          -DLSL_BUILD_STATIC=OFF

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: liblsl-${{ env.LIBLSL_VERSION }}-${{ matrix.config.rid }}
          path: ${{ env.INSTALL_PREFIX }}

  build-ios:
    name: build-${{ matrix.config.rid }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - rid: ios-arm64
            arch: arm64
    env:
      COMMON_CMAKE_OPTIONS: |
        -S liblsl \
        -B build \
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/ios.toolchain.cmake \
        -DPLATFORM=OS \
        -DDEPLOYMENT_TARGET="13.0" \
        -DENABLE_BITCODE=OFF \
        -DENABLE_ARC=OFF \
        -DARCHS="arm64" \
        -DLSL_BUILD_STATIC=OFF \

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone liblsl
        run: |
          git clone https://github.com/sccn/liblsl.git
          pushd liblsl
          git checkout ${{ env.LIBLSL_VERSION }}
          popd

      - name: Run uname
        run: uname -m

      - name: Configure
        run: |
          cmake ${{ env.COMMON_CMAKE_OPTIONS }}

      - name: Build & Install
        run: |
          pushd build
          sudo make install
          popd

      - name: Configure with install prefix
        run: |
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: liblsl-${{ env.LIBLSL_VERSION }}-${{ matrix.config.rid }}
          path: ${{ env.INSTALL_PREFIX }}

  build-linux:
    name: build-${{ matrix.config.rid }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - rid: linux-arm
            arch: arm
            gcc: arm-linux-gnueabihf

          - rid: linux-arm64
            arch: arm64
            gcc: aarch64-linux-gnu

          - rid: linux-x64
            arch: x64
            gcc: gcc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone liblsl
        run: |
          git clone https://github.com/sccn/liblsl.git
          pushd liblsl
          git checkout ${{ env.LIBLSL_VERSION }}
          popd

      - name: Run uname
        run: uname -m

      - name: Install gcc ${{ matrix.config.arch }} toolchain
        if: ${{ matrix.config.arch == 'arm' || matrix.config.arch == 'arm64' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-${{ matrix.config.gcc }}
          sudo apt-get install g++-${{ matrix.config.gcc }}
          echo "ARM_C_COMPILER=${{ matrix.config.gcc }}-gcc" >> $GITHUB_ENV
          echo "ARM_CXX_COMPILER=${{ matrix.config.gcc }}-g++" >> $GITHUB_ENV

      - name: Configure
        run: >
          cmake
          -S liblsl
          -B build
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          ${{ matrix.config.arch == 'x64' && '-DCMAKE_C_COMPILER=gcc' || '-DCMAKE_C_COMPILER=$ARM_C_COMPILER' }}
          ${{ matrix.config.arch == 'x64' && '-DCMAKE_CXX_COMPILER=g++' || '-DCMAKE_CXX_COMPILER=$ARM_CXX_COMPILER' }}
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}
          -DLSL_BUILD_STATIC=OFF

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: liblsl-${{ env.LIBLSL_VERSION }}-${{ matrix.config.rid }}
          path: ${{ env.INSTALL_PREFIX }}

  build-osx:
    name: build-${{ matrix.config.rid }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - rid: osx-arm64
            arch: arm64

          - rid: osx-x64
            arch: x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone liblsl
        run: |
          git clone https://github.com/sccn/liblsl.git
          pushd liblsl
          git checkout ${{ env.LIBLSL_VERSION }}
          popd

      - name: Run uname
        run: uname -m

      - name: Configure
        run: >
          cmake
          -S liblsl
          -B build
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.config.arch }}
          -DLSL_BUILD_STATIC=OFF

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: liblsl-${{ env.LIBLSL_VERSION }}-${{ matrix.config.rid }}
          path: ${{ env.INSTALL_PREFIX }}

  build-windows:
    name: build-${{ matrix.config.rid }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - rid: win-arm64
            arch: ARM64

          - rid: win-x64
            arch: x64

          - rid: win-x86
            arch: Win32
        include:
          - generator: Visual Studio 17 2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone liblsl
        run: |
          git clone https://github.com/sccn/liblsl.git
          pushd liblsl
          git checkout ${{ env.LIBLSL_VERSION }}
          popd

      - name: Configure
        run: >
          cmake
          -S liblsl
          -B build
          -G "${{ matrix.generator }}"
          -A ${{ matrix.config.arch }}
          -DLSL_BUILD_STATIC=OFF
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

      - name: Build & Install
        run: |
          cmake --build build --config ${{ env.BUILD_TYPE }} --target install

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: liblsl-${{ env.LIBLSL_VERSION }}-${{ matrix.config.rid }}
          path: ${{ env.INSTALL_PREFIX }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [ build-android, build-ios, build-linux, build-osx, build-windows ]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: ls -R

      - name: Create archives
        run: |
          7z a liblsl-v${{ github.ref_name }}-android-arm-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-android-arm/*
          7z a liblsl-v${{ github.ref_name }}-android-arm64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-android-arm64/*
          7z a liblsl-v${{ github.ref_name }}-android-x64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-android-x64/*
          7z a liblsl-v${{ github.ref_name }}-android-x86-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-android-x86/*
          7z a liblsl-v${{ github.ref_name }}-ios-arm64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-ios-arm64/*
          7z a liblsl-v${{ github.ref_name }}-linux-arm-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-linux-arm/*
          7z a liblsl-v${{ github.ref_name }}-linux-arm64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-linux-arm64/*
          7z a liblsl-v${{ github.ref_name }}-linux-x64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-linux-x64/*
          7z a liblsl-v${{ github.ref_name }}-osx-arm64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-osx-arm64/*
          7z a liblsl-v${{ github.ref_name }}-osx-x64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-osx-x64/*
          7z a liblsl-v${{ github.ref_name }}-win-arm64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-win-arm64/*
          7z a liblsl-v${{ github.ref_name }}-win-x64-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-win-x64/*
          7z a liblsl-v${{ github.ref_name }}-win-x86-dynamic.zip ./liblsl-${{ env.LIBLSL_VERSION }}-win-x86/*

      - name: Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          files: |
            liblsl*.zip

# References:
# https://github.com/microsoft/vcpkg/tree/master/scripts/toolchains
# https://github.com/nihui/opencv-mobile
# https://github.com/sccn/liblsl/blob/master/.github/workflows/android.yml
# https://github.com/Slackadays/Clipboard/blob/main/.github/workflows/build-clipboard.yml
# https://learn.microsoft.com/en-us/dotnet/core/rid-catalog
# https://github.com/actions/checkout/issues/785
# https://github.com/GenericMappingTools/gmt/issues/4481
# [Can't use fixup_bundle() to create a portable bundle with Qt](https://stackoverflow.com/questions/17974439/cant-use-fixup-bundle-to-create-a-portable-bundle-with-qt)
